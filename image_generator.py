from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.enums import ParseMode

from image_service import image_service
from rate_limiter import rate_limit

router = Router()

@router.message(Command("image", "img", "generate"))
@rate_limit(limit=5, interval=60)
async def handle_image_generation(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Perchance.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: /image, /img, /generate
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    command_text = message.text.split(maxsplit=1)
    if len(command_text) < 2:
        await show_help(message)
        return

    await message.answer_chat_action("upload_photo")
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
    parts = command_text[1].split(maxsplit=2)
    style = "realistic"
    user_prompt = command_text[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —Å—Ç–∏–ª—å –∫–∞–∫ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    if len(parts) >= 2 and parts[0].startswith("style:"):
        style_name = parts[0].replace("style:", "").strip().lower()
        if style_name in image_service.get_available_styles():
            style = style_name
            user_prompt = parts[1] if len(parts) > 1 else ""
        else:
            await message.answer(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style_name}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: {', '.join(image_service.get_available_styles())}"
            )
            return
    elif len(parts) >= 3 and parts[1].startswith("style:"):
        # –°—Ç–∏–ª—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        style_name = parts[1].replace("style:", "").strip().lower()
        if style_name in image_service.get_available_styles():
            style = style_name
            user_prompt = f"{parts[0]} {parts[2]}" if len(parts) > 2 else parts[0]
        else:
            await message.answer(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å: {style_name}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏: {', '.join(image_service.get_available_styles())}"
            )
            return

    if not user_prompt.strip():
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_data, error = await image_service.generate_image(
        prompt=user_prompt,
        style=style
    )
    
    if image_data:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = BufferedInputFile(image_data, filename="generated_image.png")
        caption = (
            f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Perchance\n\n"
            f"üìù –ó–∞–ø—Ä–æ—Å: {user_prompt}\n"
            f"üé≠ –°—Ç–∏–ª—å: {style}\n"
            f"‚ö°Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å: Perchance AI"
        )
        
        await message.answer_photo(photo, caption=caption, parse_mode=ParseMode.HTML)
    else:
        await message.answer(f"‚ùå {error}")

@router.message(Command("styles", "presets"))
async def handle_list_styles(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    styles = image_service.get_available_styles()
    styles_list = "\n".join([f"‚Ä¢ {style}" for style in styles])
    
    help_text = (
        "üé® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
        f"{styles_list}\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "<code>/image –∫–æ—Ç –≤ —à–ª—è–ø–µ</code> - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "<code>/image style:anime –¥–µ–≤—É—à–∫–∞-–≤–æ–∏–Ω</code> - –∞–Ω–∏–º–µ —Å—Ç–∏–ª—å\n"
        "<code>/img –ø–æ—Ä—Ç—Ä–µ—Ç –∫–æ—Ç–∞ style:art</code> - –∞—Ä—Ç —Å—Ç–∏–ª—å\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: /image, /img, /generate"
    )
    
    await message.answer(help_text, parse_mode=ParseMode.HTML)

async def show_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    help_text = (
        "üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Perchance AI</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/image –æ–ø–∏—Å–∞–Ω–∏–µ</code> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "<code>/img –æ–ø–∏—Å–∞–Ω–∏–µ</code> - —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
        "<code>/generate –æ–ø–∏—Å–∞–Ω–∏–µ</code> - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n"
        "<code>/styles</code> - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π\n\n"
        "<b>–£–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–∏–ª—è:</b>\n"
        "<code>/image style:anime –¥–µ–≤—É—à–∫–∞-–≤–æ–∏–Ω</code>\n"
        "<code>/img –ø–æ—Ä—Ç—Ä–µ—Ç style:realistic</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/styles</code> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏!"
    )
    
    await message.answer(help_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–º–ø—Ç–∞–º–∏
@router.message(F.text & ~F.command)
async def handle_possible_prompt(message: Message):
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ–º–ø—Ç.
    """
    text = message.text.strip()
    if len(text.split()) >= 3 and len(text) > 10:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
        await message.answer(
            f"üé® –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é?\n\n"
            f"<code>/image {text}</code>\n\n"
            "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å: <code>/image style:anime {text}</code>",
            parse_mode=ParseMode.HTML
        )