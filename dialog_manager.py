import hashlib
import json
import time
import logging
import random
import string
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
import os
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class Message:
    role: str  # "user" –∏–ª–∏ "assistant"
    content: str
    timestamp: float
    model: str = "unknown"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏

@dataclass
class Dialog:
    user_id: int
    dialog_hash: str
    messages: List[Message]
    created_at: float
    last_activity: float
    current_model: str = "GigaChat"  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

class DialogManager:
    def __init__(self, max_messages_per_dialog: int = 20, max_dialogs_per_user: int = 10):
        self.max_messages = max_messages_per_dialog
        self.max_dialogs = max_dialogs_per_user
        self.dialogs: Dict[int, List[Dialog]] = {}
        self.active_dialogs: Dict[int, str] = {}
        self.used_hashes: set = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ö–µ—à–µ–π
        
        os.makedirs("dialog_logs", exist_ok=True)
    
    def _generate_unique_dialog_hash(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ 6-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞"""
        while True:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
            hash_chars = random.choices(string.ascii_lowercase + string.digits, k=6)
            dialog_hash = ''.join(hash_chars)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
            if dialog_hash not in self.used_hashes:
                self.used_hashes.add(dialog_hash)
                return dialog_hash
    
    def get_active_dialog(self, user_id: int) -> Optional[Dialog]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        if user_id not in self.active_dialogs:
            return None
        
        dialog_hash = self.active_dialogs[user_id]
        return self.get_dialog(user_id, dialog_hash)
    
    def create_dialog(self, user_id: int, model: str = "GigaChat") -> Dialog:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        dialog_hash = self._generate_unique_dialog_hash()
        dialog = Dialog(
            user_id=user_id,
            dialog_hash=dialog_hash,
            messages=[],
            created_at=time.time(),
            last_activity=time.time(),
            current_model=model
        )
        
        if user_id not in self.dialogs:
            self.dialogs[user_id] = []
        
        if len(self.dialogs[user_id]) >= self.max_dialogs:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –¥–∏–∞–ª–æ–≥
            removed_dialog = self.dialogs[user_id].pop(0)
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ö–µ—à
            self.used_hashes.discard(removed_dialog.dialog_hash)
        
        self.dialogs[user_id].append(dialog)
        self.active_dialogs[user_id] = dialog_hash
        
        logger.info(f"Created new dialog {dialog_hash} for user {user_id} with model {model}")
        return dialog
    
    def get_dialog(self, user_id: int, dialog_hash: str) -> Optional[Dialog]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ —Ö–µ—à—É"""
        if user_id not in self.dialogs:
            return None
        
        for dialog in self.dialogs[user_id]:
            if dialog.dialog_hash == dialog_hash:
                return dialog
        return None
    
    def switch_model(self, user_id: int, model: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        dialog = self.get_active_dialog(user_id)
        if dialog:
            dialog.current_model = model
            logger.info(f"Switched to model {model} for user {user_id}")
            return True
        return False
    
    def get_active_model(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        dialog = self.get_active_dialog(user_id)
        return dialog.current_model if dialog else "GigaChat"
    
    def add_message(self, user_id: int, role: str, content: str, model: str = None) -> Optional[Dialog]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥"""
        dialog = self.get_active_dialog(user_id)
        if not dialog:
            # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            current_model = self.get_active_model(user_id)
            dialog = self.create_dialog(user_id, current_model)
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–∞
        if model is None:
            model = dialog.current_model
        
        message = Message(role=role, content=content, timestamp=time.time(), model=model)
        dialog.messages.append(message)
        dialog.last_activity = time.time()
        
        if len(dialog.messages) > self.max_messages:
            dialog.messages = dialog.messages[-self.max_messages:]
        
        self._log_message(user_id, dialog.dialog_hash, message)
        
        return dialog
    def get_conversation_history(self, user_id: int, max_messages: int = 10) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        dialog = self.get_active_dialog(user_id)
        if not dialog or not dialog.messages:
            return []
        
        return dialog.messages[-max_messages:]
    
    def get_conversation_history_for_api(self, user_id: int, max_messages: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è API"""
        history = self.get_conversation_history(user_id, max_messages)
        return [
            {"role": msg.role, "content": msg.content}
            for msg in history
        ]
    
    def clear_dialog(self, user_id: int) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        if user_id in self.active_dialogs:
            del self.active_dialogs[user_id]
            logger.info(f"Cleared active dialog for user {user_id}")
            return True
        return False
    
    def switch_model(self, user_id: int, model: str) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
        dialog = self.get_active_dialog(user_id)
        
        if not dialog:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
            self.create_dialog(user_id, model)
            logger.info(f"Created new dialog with model {model} for user {user_id}")
            return True
        
        old_model = dialog.current_model
        dialog.current_model = model
        logger.info(f"Switched from {old_model} to {model} for user {user_id}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"Dialog hash: {dialog.dialog_hash}")
        logger.info(f"Total messages: {len(dialog.messages)}")
        return True
    
    def get_user_dialogs(self, user_id: int) -> List[Dialog]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.dialogs.get(user_id, [])
    
    def _log_message(self, user_id: int, dialog_hash: str, message: Message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            log_entry = {
                "user_id": user_id,
                "dialog_hash": dialog_hash,
                "timestamp": datetime.fromtimestamp(message.timestamp).isoformat(),
                "role": message.role,
                "model": message.model,
                "content": message.content[:500]
            }
            
            with open(f"dialog_logs/dialogs.log", "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
            
            user_log_dir = f"dialog_logs/user_{user_id}"
            os.makedirs(user_log_dir, exist_ok=True)
            
            with open(f"{user_log_dir}/{dialog_hash}.log", "a", encoding="utf-8") as f:
                f.write(json.dumps(log_entry, ensure_ascii=False) + "\n")
                
        except Exception as e:
            logger.error(f"Error logging message: {e}")
    
    def export_dialog(self, user_id: int, dialog_hash: str) -> Optional[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        dialog = self.get_dialog(user_id, dialog_hash)
        if not dialog:
            return None
        
        export_text = f"–î–∏–∞–ª–æ–≥ #{dialog_hash}\n"
        export_text += f"–°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(dialog.created_at)}\n"
        export_text += f"–ú–æ–¥–µ–ª—å: {dialog.current_model}\n"
        export_text += f"–°–æ–æ–±—â–µ–Ω–∏–π: {len(dialog.messages)}\n\n"
        
        for msg in dialog.messages:
            role = "üë§ –í—ã" if msg.role == "user" else "ü§ñ –ë–æ—Ç"
            time_str = datetime.fromtimestamp(msg.timestamp).strftime("%H:%M")
            model_info = f" ({msg.model})" if msg.model != "unknown" else ""
            export_text += f"{role}{model_info} ({time_str}):\n{msg.content}\n\n"
        
        return export_text